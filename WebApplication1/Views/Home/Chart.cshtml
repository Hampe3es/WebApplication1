<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chart Page</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script src="~/Scripts/jquery-3.4.1.js"></script>
    <link rel="stylesheet" href="~/Content/Stylesheet/chartStyle.css">
</head>
<body>
    <div class="header">
        @{Html.RenderAction("Menu");}
    </div>

    <div class="graf-container">

        <div class="button-container">
            <button id="btFukt" onclick="updatchartFukt(this)" value="0">Fukt</button>
            <button id="btTemp" onclick="updatchartTemp(this)" value="1">Temp</button>
            <select id="selectTime" onchange="selectTimeSpan()">
                <option value="HalfHour">Half Hour</option>
                <option value="Hour">Hour</option>
                <option value="Day">Day</option>
                <option value="Week">Week</option>
                <option value="Month">Month</option>
                <option value="AllTime">All Time</option>
            </select>
            <div id="setTime">
                <input type="datetime-local" id="startDate" onchange="setStartTime()" />
                <input type="datetime-local" id="endDate" onchange="setEndTime()" />
                <button onclick="setTime()">set</button>
            </div>
            
            @*<button onclick="uppdate()">pres</button>*@
        </div>

        <div class="scroll-container">
            <div id="chart-container">
                <canvas id="myChart" height="300"></canvas>
            </div>

        </div>
    </div>

    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        var xValuesLabels = [];
        var xValuesDates = [];
        var yValuesFukt = [];
        var yValuesTemp = [];
        var PersonIDValues = [];
        var NameValues = [];
        var LastNameValues = [];


        $.get("get_data", {}, function (data) {

            for (let i = 0; i < data.length; i++) {       //get time and add to array for label
                var addToArray = data[i]['Measure_Time'];
                xValuesLabels.push(addToArray);
            }
            //console.log(xValuesLabels);



            for (let i = 0; i < data.length; i++) {       //get time and add to array for select
                var measureTime = data[i]['Measure_Time'];
                var date = new Date(measureTime);
                var addToArray = date.setMilliseconds(0, 0, 0, 0);
                xValuesDates.push(addToArray);
            }
            //console.log(xValuesDates);



            for (let i = 0; i < data.length; i++) {       //get Blue and add to array
                var addToArray = data[i]['Humidity'];
                yValuesFukt.push(addToArray);
            }
            //console.log(yValuesFukt);


            for (let i = 0; i < data.length; i++) {       //get Red and add to array
                var addToArray = data[i]['Temperature'];
                yValuesTemp.push(addToArray);
            }
            //console.log(yValuesTemp);



            //--------------------------------------------------------------------------------------

            //for (let i = 0; i < data.length; i++) {       //get PersonID and add to array
            //    var addToArray = data[i]['PersonID'];
            //    PersonIDValues.push(addToArray);
            //}
            //console.log(PersonIDValues);


            //for (let i = 0; i < data.length; i++) {       //get Name and add to array
            //    var addToArray = data[i]['Name'];
            //    NameValues.push(addToArray);
            //}
            //console.log(NameValues);


            //for (let i = 0; i < data.length; i++) {       //get LastName and add to array
            //    var addToArray = data[i]['LastName'];
            //    LastNameValues.push(addToArray);
            //}
            //console.log(LastNameValues);


            addingToArrayDone()
            setMinMaxxValueDateTime()
        })      //få datra ifrån json och lägg in det i arrays

        const data = {
            labels: xValuesLabels,
            datasets: [{                         //Införandet av data
                label: 'fukt',
                data: yValuesFukt,
                borderColor: "blue",
                fill: false,
                hidden: true
            }, {
                label: 'temp',
                data: yValuesTemp,
                borderColor: "red",
                fill: false,
                hidden: true
            }]
        };    //graf datan


        const config = {
            type: 'line',
            data,
            options: {
                scales: {
                    x: {
                        min: xValuesLabels[300],
                    },
                    y: {
                        beginAtZero: true,
                        // max: 40,
                    }
                },
                animation: false,
                plugins: {
                    legend: { display: false },
                }
            }
        };    //garf configration

        // render init block
        const myChart = new Chart(
            document.getElementById('myChart'),
            config
        );


        function addingToArrayDone() {                                  //gör så att värden vissas när sidan startar
            myChart.config.data.datasets[0].hidden = false;
            myChart.config.options.scales.x.min = xValuesLabels[729];    //729

            myChart.update();
        }   //när datan har lags till i alla arrays uppdatera grafen


        function updatchartFukt(dataset) {                                       //visar värden
            const isDataShown = myChart.isDatasetVisible(dataset.value);
            if (isDataShown === false) {
                myChart.show(dataset.value);
                document.getElementById("btFukt").style.background = '#0abf4c';
            }
            if (isDataShown === true) {
                myChart.hide(dataset.value);
                document.getElementById("btFukt").style.background = '#ffffff';
            }
        }   //vissar och gömmer fukt

        function updatchartTemp(dataset) {
            const isDataShown = myChart.isDatasetVisible(dataset.value);
            if (isDataShown === false) {
                myChart.show(dataset.value);
                document.getElementById("btTemp").style.background = '#0abf4c';
            }
            if (isDataShown === true) {
                myChart.hide(dataset.value);
                document.getElementById("btTemp").style.background = '#ffffff';
            }
        }   //vissar och gömmer temp


    </script>
    <script src="~/Content/Javascript/chartJavaScript.js"></script>
</body>
</html>